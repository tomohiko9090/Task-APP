# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/groupdate/all/groupdate.rbi
#
# groupdate-6.1.0

module Groupdate
  def day_start; end
  def day_start=(val); end
  def self.adapters; end
  def self.day_start; end
  def self.day_start=(val); end
  def self.process_result(relation, result, **options); end
  def self.register_adapter(name, adapter); end
  def self.time_zone; end
  def self.time_zone=(val); end
  def self.week_start; end
  def self.week_start=(val); end
  def time_zone; end
  def time_zone=(val); end
  def week_start; end
  def week_start=(val); end
end
class Groupdate::Magic
  def day_start; end
  def group_index; end
  def group_index=(arg0); end
  def initialize(period:, **options); end
  def n_seconds; end
  def n_seconds=(arg0); end
  def options; end
  def options=(arg0); end
  def period; end
  def period=(arg0); end
  def range; end
  def self.validate_period(period, permit); end
  def series_builder; end
  def time_range; end
  def time_zone; end
  def validate_arguments; end
  def validate_keywords; end
  def week_start; end
end
class Groupdate::Magic::Enumerable < Groupdate::Magic
  def group_by(enum, &_block); end
  def self.group_by(enum, period, options, &block); end
end
class Groupdate::Magic::Relation < Groupdate::Magic
  def cast_method; end
  def cast_result(result, multiple_groups); end
  def check_nils(result, multiple_groups, relation); end
  def initialize(**options); end
  def perform(relation, result, default_value:); end
  def self.generate_relation(relation, field:, **options); end
  def self.process_result(relation, result, **options); end
  def self.resolve_column(relation, column); end
  def self.validate_column(column); end
  def time_zone_support?(relation); end
end
class Groupdate::SeriesBuilder
  def day_start; end
  def entire_series?(series_default); end
  def generate(data, default_value:, series_default: nil, multiple_groups: nil, group_index: nil); end
  def generate_series(data, multiple_groups, group_index); end
  def handle_multiple(data, series, multiple_groups, group_index); end
  def initialize(period:, time_zone:, day_start:, week_start:, n_seconds:, **options); end
  def key_format; end
  def n_seconds; end
  def now; end
  def options; end
  def period; end
  def round_time(time); end
  def step; end
  def time_range; end
  def time_zone; end
  def utc; end
  def week_start; end
end
module Groupdate::Adapters
end
class Groupdate::Adapters::BaseAdapter
  def column; end
  def day_start; end
  def generate; end
  def initialize(relation, column:, period:, time_zone:, time_range:, week_start:, day_start:, n_seconds:); end
  def n_seconds; end
  def period; end
  def week_start; end
  def where_clause; end
end
class Groupdate::Adapters::MySQLAdapter < Groupdate::Adapters::BaseAdapter
  def clean_group_clause(clause); end
  def group_clause; end
end
class Groupdate::Adapters::PostgreSQLAdapter < Groupdate::Adapters::BaseAdapter
  def clean_group_clause(clause); end
  def group_clause; end
end
class Groupdate::Adapters::SQLiteAdapter < Groupdate::Adapters::BaseAdapter
  def group_clause; end
end
module Enumerable
  def group_by_day(*args, **options, &block); end
  def group_by_day_of_month(*args, **options, &block); end
  def group_by_day_of_week(*args, **options, &block); end
  def group_by_day_of_year(*args, **options, &block); end
  def group_by_hour(*args, **options, &block); end
  def group_by_hour_of_day(*args, **options, &block); end
  def group_by_minute(*args, **options, &block); end
  def group_by_minute_of_hour(*args, **options, &block); end
  def group_by_month(*args, **options, &block); end
  def group_by_month_of_year(*args, **options, &block); end
  def group_by_period(period, *args, **options, &block); end
  def group_by_quarter(*args, **options, &block); end
  def group_by_second(*args, **options, &block); end
  def group_by_week(*args, **options, &block); end
  def group_by_year(*args, **options, &block); end
end
class Groupdate::Error < RuntimeError
end
module Groupdate::QueryMethods
  def group_by_day(field, **options); end
  def group_by_day_of_month(field, **options); end
  def group_by_day_of_week(field, **options); end
  def group_by_day_of_year(field, **options); end
  def group_by_hour(field, **options); end
  def group_by_hour_of_day(field, **options); end
  def group_by_minute(field, **options); end
  def group_by_minute_of_hour(field, **options); end
  def group_by_month(field, **options); end
  def group_by_month_of_year(field, **options); end
  def group_by_period(period, field, permit: nil, **options); end
  def group_by_quarter(field, **options); end
  def group_by_second(field, **options); end
  def group_by_week(field, **options); end
  def group_by_year(field, **options); end
end
module Groupdate::Relation
  def calculate(*args, &block); end
  extend ActiveSupport::Concern
end
class ActiveRecord::Base
  extend Groupdate::QueryMethods
end
class ActiveRecord::Relation
  def groupdate_values; end
  def groupdate_values=(arg0); end
  include Groupdate::Relation
end
